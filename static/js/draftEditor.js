class DraftEditor {
    constructor() {
        this.currentDraft = null;
        this.isEditing = false;
        this.currentNewsId = null;
        this.init();
    }

    init() {
        this.bindEvents();
    }

    bindEvents() {
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('edit-draft-btn')) {
                this.startEditing(parseInt(e.target.dataset.newsId));
            }
            
            if (e.target.classList.contains('save-draft-btn')) {
                this.saveDraft();
            }
            
            if (e.target.classList.contains('cancel-edit-btn')) {
                this.cancelEditing();
            }
            
            if (e.target.classList.contains('use-template-btn')) {
                this.applyTemplate();
            }
            
            if (e.target.classList.contains('editor-modal')) {
                this.cancelEditing();
            }
        });

        document.addEventListener('input', (e) => {
            if (this.isEditing && e.target.classList.contains('draft-field')) {
                this.autoSave();
            }
        });

        document.addEventListener('keydown', (e) => {
            if (this.isEditing && e.key === 'Escape') {
                this.cancelEditing();
            }
        });
    }

    async startEditing(newsId) {
        this.isEditing = true;
        this.currentNewsId = newsId;
        
        try {
            const response = await fetch(`/api/get-draft/${newsId}`);
            const draftData = await response.json();
            this.currentDraft = draftData;
            this.showEditor();
            this.populateForm();
        } catch (error) {
            console.error('Error loading draft:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞', 'error');
        }
    }

    showEditor() {
        const editorHTML = `
            <div class="editor-modal">
                <div class="editor-container">
                    <div class="editor-header">
                        <h2>‚úçÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä —á–µ—Ä–Ω–æ–≤–∏–∫–∞</h2>
                        <div class="editor-actions">
                            <button class="btn btn-secondary use-template-btn">üìù –®–∞–±–ª–æ–Ω</button>
                            <button class="btn btn-secondary cancel-edit-btn">‚ùå –û—Ç–º–µ–Ω–∞</button>
                            <button class="btn btn-primary save-draft-btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        </div>
                    </div>
                    
                    <div class="editor-content">
                        <div class="form-group">
                            <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                            <input type="text" class="draft-field" data-field="title" placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫...">
                        </div>
                        
                        <div class="form-group">
                            <label>–õ–∏–¥-–∞–±–∑–∞—Ü:</label>
                            <textarea class="draft-field" data-field="lead" rows="3" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–≤–æ–¥–Ω—ã–π –∞–±–∑–∞—Ü..."></textarea>
                        </div>
                        
                        <div class="form-group">
                            <label>–ö–ª—é—á–µ–≤—ã–µ –ø—É–Ω–∫—Ç—ã (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):</label>
                            <div class="bullets-editor">
                                <textarea class="draft-field" data-field="bullets" rows="6" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏..."></textarea>
                                <small>–ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±—É–ª–ª–µ—Ç-–ø–æ–∏–Ω—Ç</small>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label>–¶–∏—Ç–∞—Ç–∞:</label>
                            <textarea class="draft-field" data-field="quote" rows="2" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞–∂–Ω—É—é —Ü–∏—Ç–∞—Ç—É..."></textarea>
                        </div>
                    </div>
                    
                    <div class="editor-preview">
                        <h3>üìä –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</h3>
                        <div class="preview-content" id="draft-preview"></div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', editorHTML);
    }

    populateForm() {
        if (!this.currentDraft) return;

        const fields = {
            'title': this.currentDraft.title || '',
            'lead': this.currentDraft.lead || '',
            'bullets': Array.isArray(this.currentDraft.bullets) ? this.currentDraft.bullets.join('\n') : '',
            'quote': this.currentDraft.quote || ''
        };

        Object.entries(fields).forEach(([field, value]) => {
            const element = document.querySelector(`[data-field="${field}"]`);
            if (element) element.value = value;
        });
        
        this.updatePreview();
    }

    updatePreview() {
        const preview = document.getElementById('draft-preview');
        if (!preview) return;

        const formData = this.getFormData();
        
        preview.innerHTML = `
            <div class="preview-draft">
                <h4>${formData.title || '–ó–∞–≥–æ–ª–æ–≤–æ–∫'}</h4>
                <p class="preview-lead">${formData.lead || '–õ–∏–¥-–∞–±–∑–∞—Ü...'}</p>
                <ul class="preview-bullets">
                    ${formData.bullets.map(bullet => bullet ? `<li>${bullet}</li>` : '').join('')}
                </ul>
                <blockquote class="preview-quote">${formData.quote || '–¶–∏—Ç–∞—Ç–∞...'}</blockquote>
            </div>
        `;
    }

    getFormData() {
        const fields = ['title', 'lead', 'bullets', 'quote'];
        const data = {};
        
        fields.forEach(field => {
            const element = document.querySelector(`[data-field="${field}"]`);
            if (element) {
                if (field === 'bullets') {
                    data[field] = element.value.split('\n').filter(b => b.trim());
                } else {
                    data[field] = element.value;
                }
            }
        });
        
        return data;
    }

    autoSave() {
        this.currentDraft = this.getFormData();
        this.updatePreview();
    }

    async saveDraft() {
        try {
            this.currentDraft = this.getFormData();
            
            const response = await fetch(`/api/save-draft/${this.currentNewsId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(this.currentDraft)
            });
            
            const result = await response.json();
            
            if (result.status === 'success') {
                this.showNotification('–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
                this.closeEditor();
                
                // –û–±–Ω–æ–≤–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            } else {
                throw new Error(result.message);
            }
            
        } catch (error) {
            console.error('Error saving draft:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞', 'error');
        }
    }

    applyTemplate() {
        const template = {
            title: "–ö–ª—é—á–µ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö",
            lead: "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤. –°–æ–±—ã—Ç–∏–µ –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ—á–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –∏ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏.",
            bullets: [
                "–°–æ–±—ã—Ç–∏–µ –æ–∫–∞–∑–∞–ª–æ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –∞–∫—Ç–∏–≤—ã –∏ —Å–µ–∫—Ç–æ—Ä–∞",
                "–†–µ–∞–∫—Ü–∏—è —Ä—ã–Ω–∫–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤", 
                "–î–∞–ª—å–Ω–µ–π—à–∏–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É—é—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞"
            ],
            quote: "–≠—Ç–æ –≤–∞–∂–Ω—ã–π –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç –¥–ª—è —Ä—ã–Ω–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã - –≤–µ–¥—É—â–∏–π –æ—Ç—Ä–∞—Å–ª–µ–≤–æ–π —ç–∫—Å–ø–µ—Ä—Ç"
        };
        
        this.currentDraft = template;
        this.populateForm();
        this.showNotification('–®–∞–±–ª–æ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω!', 'info');
    }

    cancelEditing() {
        if (confirm('–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? –ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
            this.closeEditor();
        }
    }

    closeEditor() {
        const modal = document.querySelector('.editor-modal');
        if (modal) modal.remove();
        this.isEditing = false;
        this.currentDraft = null;
        this.currentNewsId = null;
    }

    showNotification(message, type) {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }
}

document.addEventListener('DOMContentLoaded', () => {
    window.draftEditor = new DraftEditor();
});
