import requests
from bs4 import BeautifulSoup
import json
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_selectors():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    test_sources = [
        {
            "name": "–†–ë–ö –§–∏–Ω–∞–Ω—Å—ã",
            "url": "https://www.rbc.ru/finances/",
            "possible_selectors": [
                "a.news-feed__item",
                "div.news-feed__item", 
                "span.news-feed__item__title",
                "a.main__feed__link"
            ]
        },
        {
            "name": "–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç –§–∏–Ω–∞–Ω—Å—ã",
            "url": "https://www.kommersant.ru/finance",
            "possible_selectors": [
                "a.uho__link",
                "div.uho",
                "h2.vam__head",
                "article"
            ]
        },
        {
            "name": "–ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å –§–∏–Ω–∞–Ω—Å—ã", 
            "url": "https://www.interfax.ru/business/",
            "possible_selectors": [
                "div.newsTimeline__item",
                "a.newsTimeline__item__title",
                "div.an",
                "a.an__text"
            ]
        },
        {
            "name": "Reuters Business",
            "url": "https://www.reuters.com/business/",
            "possible_selectors": [
                "a[data-testid*='Heading']",
                "div[data-testid*='story']",
                "article",
                "div.story-card"
            ]
        },
        {
            "name": "–ë–∞–Ω–∫–∏.—Ä—É –ù–æ–≤–æ—Å—Ç–∏",
            "url": "https://www.banki.ru/news/",
            "possible_selectors": [
                "a.text-color-black", 
                "div.news-item",
                "article.news-list-item"
            ]
        }
    ]

    session = requests.Session()
    session.headers.update({
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
    })

    results = {}

    for source in test_sources:
        print(f"\n{'='*60}")
        print(f"üîç –¢–ï–°–¢–ò–†–£–ï–ú: {source['name']}")
        print(f"üåê URL: {source['url']}")
        print(f"{'='*60}")
        
        results[source['name']] = {
            'url': source['url'],
            'selectors': {}
        }

        try:
            response = session.get(source['url'], timeout=15, verify=False)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            for selector in source['possible_selectors']:
                elements = soup.select(selector)
                print(f"\nüìå –°–µ–ª–µ–∫—Ç–æ—Ä: '{selector}'")
                print(f"   –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(elements)}")
                
                results[source['name']]['selectors'][selector] = len(elements)
                
                if elements:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤—ã—Ö 2 —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                    for i, elem in enumerate(elements[:2]):
                        text = elem.get_text().strip().replace('\n', ' ')[:80]
                        href = elem.get('href', '') if hasattr(elem, 'get') else ''
                        
                        print(f"   {i+1}. –¢–µ–∫—Å—Ç: {text}...")
                        if href:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
                            if href.startswith('//'):
                                full_url = f"https:{href}"
                            elif href.startswith('/'):
                                base_url = '/'.join(source['url'].split('/')[:3])
                                full_url = base_url + href
                            else:
                                full_url = href
                            print(f"      üîó –°—Å—ã–ª–∫–∞: {full_url}")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø–æ–∏—Å–∫ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º (–ø–µ—Ä–≤—ã–µ 5)
            print(f"\nüìé –í—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–µ—Ä–≤—ã–µ 5):")
            all_links = soup.find_all('a', href=True, string=True)
            link_count = 0
            for link in all_links:
                text = link.get_text().strip()
                href = link.get('href')
                if text and len(text) > 15 and not any(skip in href for skip in ['javascript:', '#', 'mailto:']):
                    print(f"   üîó {text[:50]}... -> {href}")
                    link_count += 1
                    if link_count >= 5:
                        break

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {source['name']}: {e}")
            results[source['name']]['error'] = str(e)
            continue

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
    with open('data/selector_test_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ data/selector_test_results.json")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª—É—á—à–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –°–ï–õ–ï–ö–¢–û–†–ê–ú:")
    for source_name, data in results.items():
        if 'selectors' in data:
            best_selector = max(data['selectors'].items(), key=lambda x: x[1])
            if best_selector[1] > 0:
                print(f"   {source_name}: '{best_selector[0]}' ({best_selector[1]} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")

def update_sources_config():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ sources.json –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        with open('data/selector_test_results.json', 'r', encoding='utf-8') as f:
            results = json.load(f)
        
        with open('config/sources.json', 'r', encoding='utf-8') as f:
            sources_config = json.load(f)
        
        updated = False
        
        for source in sources_config.get('html_sources', []):
            source_name = source['name']
            if source_name in results and 'selectors' in results[source_name]:
                # –ù–∞—Ö–æ–¥–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                selectors = results[source_name]['selectors']
                if selectors:
                    best_selector = max(selectors.items(), key=lambda x: x[1])
                    if best_selector[1] > 0:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏
                        source['selectors']['article'] = best_selector[0]
                        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω {source_name}: article -> '{best_selector[0]}'")
                        updated = True
        
        if updated:
            with open('config/sources.json', 'w', encoding='utf-8') as f:
                json.dump(sources_config, f, ensure_ascii=False, indent=2)
            print("üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è sources.json –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            print("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ test_selectors()")

if __name__ == "__main__":
    print("üéØ –ò–ù–°–¢–†–£–ú–ï–ù–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ï–õ–ï–ö–¢–û–†–û–í –ù–û–í–û–°–¢–ï–ô")
    print("=" * 60)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        print("2. –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é sources.json")
        print("3. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1/2/3): ").strip()
        
        if choice == '1':
            test_selectors()
        elif choice == '2':
            update_sources_config()
        elif choice == '3':
            print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")