import time
import schedule
import logging
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from data_collector import FinanceNewsCollector

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('data/collector.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AutoNewsCollector:
    def __init__(self):
        self.collector = FinanceNewsCollector()
        self.is_running = False

    def collect_news_job(self):
        """–ó–∞–¥–∞—á–∞ –ø–æ —Å–±–æ—Ä—É –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            logger.info("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –°–ë–û–†–ê –ù–û–í–û–°–¢–ï–ô")
            
            articles = self.collector.collect_news(hours_back=24)
            
            logger.info(f"‚úÖ –ê–í–¢–û–°–ë–û–† –ó–ê–í–ï–†–®–ï–ù. –°–æ–±—Ä–∞–Ω–æ {len(articles)} —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.log_statistics()
            
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ê–í–¢–û–°–ë–û–†–ê: {e}")

    def log_statistics(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import sqlite3
            conn = sqlite3.connect("data/news.db")
            cursor = conn.cursor()
            
            cursor.execute("SELECT COUNT(*) FROM raw_articles WHERE is_finance = 1")
            total_finance = cursor.fetchone()[0]
            
            cursor.execute("""
                SELECT source_name, COUNT(*) 
                FROM raw_articles 
                WHERE is_finance = 1 
                GROUP BY source_name
            """)
            sources_stats = cursor.fetchall()
            
            conn.close()
            
            logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´: –í—Å–µ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π: {total_finance}")
            for source, count in sources_stats:
                logger.info(f"  {source}: {count} —Å—Ç–∞—Ç–µ–π")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def run_immediately(self):
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞"""
        logger.info("‚ñ∂Ô∏è –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –ó–ê–ü–£–°–ö –°–ë–û–†–ê")
        self.collect_news_job()

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.is_running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        logger.info("‚è∞ –ó–ê–ü–£–°–ö –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –°–ë–û–†–ê –ù–û–í–û–°–¢–ï–ô")
        
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        schedule.every(30).minutes.do(self.collect_news_job)  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        schedule.every(1).hour.do(self.collect_news_job)      # –ö–∞–∂–¥—ã–π —á–∞—Å
        schedule.every().day.at("08:00").do(self.collect_news_job)  # –£—Ç—Ä–æ–º
        schedule.every().day.at("12:00").do(self.collect_news_job)  # –í –æ–±–µ–¥
        schedule.every().day.at("18:00").do(self.collect_news_job)  # –í–µ—á–µ—Ä–æ–º
        
        self.is_running = True
        
        logger.info("üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û:")
        logger.info("  - –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")
        logger.info("  - –ö–∞–∂–¥—ã–π —á–∞—Å") 
        logger.info("  - –í 08:00, 12:00, 18:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Å–±–æ—Ä–∞
        self.run_immediately()
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        while self.is_running:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except KeyboardInterrupt:
                logger.info("üõë –û–°–¢–ê–ù–û–í–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –ü–û –ó–ê–ü–†–û–°–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.is_running = False
        logger.info("üõë –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –û–°–¢–ê–ù–û–í–õ–ï–ù")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üì° RADAR - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –°–ë–û–†–©–ò–ö –§–ò–ù–ê–ù–°–û–í–´–• –ù–û–í–û–°–¢–ï–ô")
    print("=" * 60)
    print("–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:")
    print("  1. –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π —Å–±–æ—Ä (–∑–∞–ø—É—Å–∫ –∏ –≤—ã—Ö–æ–¥)")
    print("  2. –§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º (–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–±–æ—Ä –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)")
    print("  3. –¢–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–±–µ–∑ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–±–æ—Ä–∞)")
    print()
    
    try:
        mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1/2/3, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ").strip()
        
        collector = AutoNewsCollector()
        
        if mode == "2":
            print("üöÄ –ó–ê–ü–£–°–ö –í –§–û–ù–û–í–û–ú –†–ï–ñ–ò–ú–ï...")
            collector.start_scheduler()
        elif mode == "3":
            print("‚è∞ –ó–ê–ü–£–°–ö –¢–û–õ–¨–ö–û –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê...")
            collector.is_running = True
            collector.start_scheduler()
        else:
            print("‚ö° –û–î–ù–û–ö–†–ê–¢–ù–´–ô –°–ë–û–†...")
            collector.run_immediately()
            print("‚úÖ –°–ë–û–† –ó–ê–í–ï–†–®–ï–ù")
            
    except KeyboardInterrupt:
        print("\nüõë –í–´–•–û–î –ü–û –ó–ê–ü–†–û–°–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")

if __name__ == "__main__":
    main()